[
  {
    schema: "auth",
    function_name: "email",
    arguments: "",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "auth",
    function_name: "jwt",
    arguments: "",
    return_type: "jsonb",
    language: "sql",
  },
  {
    schema: "auth",
    function_name: "role",
    arguments: "",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "auth",
    function_name: "uid",
    arguments: "",
    return_type: "uuid",
    language: "sql",
  },
  {
    schema: "extensions",
    function_name: "armor",
    arguments: "bytea",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "armor",
    arguments: "bytea, text[], text[]",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "crypt",
    arguments: "text, text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "dearmor",
    arguments: "text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "decrypt",
    arguments: "bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "decrypt_iv",
    arguments: "bytea, bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "digest",
    arguments: "text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "digest",
    arguments: "bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "encrypt",
    arguments: "bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "encrypt_iv",
    arguments: "bytea, bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "gen_random_bytes",
    arguments: "integer",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "gen_random_uuid",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "gen_salt",
    arguments: "text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "gen_salt",
    arguments: "text, integer",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "grant_pg_cron_access",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "grant_pg_graphql_access",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "grant_pg_net_access",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "hmac",
    arguments: "bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "hmac",
    arguments: "text, text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pg_stat_statements",
    arguments:
      "showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone",
    return_type: "SETOF record",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pg_stat_statements_info",
    arguments: "OUT dealloc bigint, OUT stats_reset timestamp with time zone",
    return_type: "record",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pg_stat_statements_reset",
    arguments: "userid oid, dbid oid, queryid bigint, minmax_only boolean",
    return_type: "timestamp with time zone",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_armor_headers",
    arguments: "text, OUT key text, OUT value text",
    return_type: "SETOF record",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_key_id",
    arguments: "bytea",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt",
    arguments: "bytea, bytea, text, text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt",
    arguments: "bytea, bytea",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt",
    arguments: "bytea, bytea, text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt_bytea",
    arguments: "bytea, bytea, text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt_bytea",
    arguments: "bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_decrypt_bytea",
    arguments: "bytea, bytea",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_encrypt",
    arguments: "text, bytea",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_encrypt",
    arguments: "text, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_encrypt_bytea",
    arguments: "bytea, bytea",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_pub_encrypt_bytea",
    arguments: "bytea, bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_decrypt",
    arguments: "bytea, text, text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_decrypt",
    arguments: "bytea, text",
    return_type: "text",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_decrypt_bytea",
    arguments: "bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_decrypt_bytea",
    arguments: "bytea, text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_encrypt",
    arguments: "text, text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_encrypt",
    arguments: "text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_encrypt_bytea",
    arguments: "bytea, text, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgp_sym_encrypt_bytea",
    arguments: "bytea, text",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "pgrst_ddl_watch",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "pgrst_drop_watch",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "set_graphql_placeholder",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "extensions",
    function_name: "uuid_generate_v1",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_generate_v1mc",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_generate_v3",
    arguments: "namespace uuid, name text",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_generate_v4",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_generate_v5",
    arguments: "namespace uuid, name text",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_nil",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_ns_dns",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_ns_oid",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_ns_url",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "extensions",
    function_name: "uuid_ns_x500",
    arguments: "",
    return_type: "uuid",
    language: "c",
  },
  {
    schema: "graphql",
    function_name: "_internal_resolve",
    arguments:
      'query text, variables jsonb, "operationName" text, extensions jsonb',
    return_type: "jsonb",
    language: "c",
  },
  {
    schema: "graphql",
    function_name: "comment_directive",
    arguments: "comment_ text",
    return_type: "jsonb",
    language: "sql",
  },
  {
    schema: "graphql",
    function_name: "exception",
    arguments: "message text",
    return_type: "text",
    language: "plpgsql",
  },
  {
    schema: "graphql",
    function_name: "get_schema_version",
    arguments: "",
    return_type: "integer",
    language: "sql",
  },
  {
    schema: "graphql",
    function_name: "increment_schema_version",
    arguments: "",
    return_type: "event_trigger",
    language: "plpgsql",
  },
  {
    schema: "graphql",
    function_name: "resolve",
    arguments:
      'query text, variables jsonb, "operationName" text, extensions jsonb',
    return_type: "jsonb",
    language: "plpgsql",
  },
  {
    schema: "graphql_public",
    function_name: "graphql",
    arguments:
      '"operationName" text, query text, variables jsonb, extensions jsonb',
    return_type: "jsonb",
    language: "sql",
  },
  {
    schema: "pgbouncer",
    function_name: "get_auth",
    arguments: "p_usename text",
    return_type: "TABLE(username text, password text)",
    language: "plpgsql",
  },
  {
    schema: "public",
    function_name: "mark_show_fully_watched",
    arguments: "p_user_id uuid, p_tmdb_id integer, p_total_episodes integer",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "public",
    function_name: "toggle_episode_watched",
    arguments:
      "p_user_id uuid, p_tmdb_id integer, p_season integer, p_episode integer, p_watched boolean",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "public",
    function_name: "toggle_season_watched",
    arguments:
      "p_user_id uuid, p_tmdb_id integer, p_season integer, p_episode_count integer, p_watched boolean",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "public",
    function_name: "update_updated_at_column",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "apply_rls",
    arguments: "wal jsonb, max_record_bytes integer",
    return_type: "SETOF realtime.wal_rls",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "broadcast_changes",
    arguments:
      "topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "build_prepared_statement_sql",
    arguments:
      "prepared_statement_name text, entity regclass, columns realtime.wal_column[]",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "realtime",
    function_name: "cast",
    arguments: "val text, type_ regtype",
    return_type: "jsonb",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "check_equality_op",
    arguments: "op realtime.equality_op, type_ regtype, val_1 text, val_2 text",
    return_type: "boolean",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "is_visible_through_filters",
    arguments:
      "columns realtime.wal_column[], filters realtime.user_defined_filter[]",
    return_type: "boolean",
    language: "sql",
  },
  {
    schema: "realtime",
    function_name: "list_changes",
    arguments:
      "publication name, slot_name name, max_changes integer, max_record_bytes integer",
    return_type: "SETOF realtime.wal_rls",
    language: "sql",
  },
  {
    schema: "realtime",
    function_name: "quote_wal2json",
    arguments: "entity regclass",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "realtime",
    function_name: "send",
    arguments: "payload jsonb, event text, topic text, private boolean",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "subscription_check_filters",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "realtime",
    function_name: "to_regrole",
    arguments: "role_name text",
    return_type: "regrole",
    language: "sql",
  },
  {
    schema: "realtime",
    function_name: "topic",
    arguments: "",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "storage",
    function_name: "add_prefixes",
    arguments: "_bucket_id text, _name text",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "can_insert_object",
    arguments: "bucketid text, name text, owner uuid, metadata jsonb",
    return_type: "void",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "delete_prefix",
    arguments: "_bucket_id text, _name text",
    return_type: "boolean",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "delete_prefix_hierarchy_trigger",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "enforce_bucket_name_length",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "extension",
    arguments: "name text",
    return_type: "text",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "filename",
    arguments: "name text",
    return_type: "text",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "foldername",
    arguments: "name text",
    return_type: "text[]",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "get_level",
    arguments: "name text",
    return_type: "integer",
    language: "sql",
  },
  {
    schema: "storage",
    function_name: "get_prefix",
    arguments: "name text",
    return_type: "text",
    language: "sql",
  },
  {
    schema: "storage",
    function_name: "get_prefixes",
    arguments: "name text",
    return_type: "text[]",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "get_size_by_bucket",
    arguments: "",
    return_type: "TABLE(size bigint, bucket_id text)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "list_multipart_uploads_with_delimiter",
    arguments:
      "bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text",
    return_type:
      "TABLE(key text, id text, created_at timestamp with time zone)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "list_objects_with_delimiter",
    arguments:
      "bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text",
    return_type:
      "TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "objects_insert_prefix_trigger",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "objects_update_prefix_trigger",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "operation",
    arguments: "",
    return_type: "text",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "prefixes_insert_trigger",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "search",
    arguments:
      "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text",
    return_type:
      "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "search_legacy_v1",
    arguments:
      "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text",
    return_type:
      "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "search_v1_optimised",
    arguments:
      "prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text",
    return_type:
      "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "search_v2",
    arguments:
      "prefix text, bucket_name text, limits integer, levels integer, start_after text",
    return_type:
      "TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)",
    language: "plpgsql",
  },
  {
    schema: "storage",
    function_name: "update_updated_at_column",
    arguments: "",
    return_type: "trigger",
    language: "plpgsql",
  },
  {
    schema: "vault",
    function_name: "_crypto_aead_det_decrypt",
    arguments:
      "message bytea, additional bytea, key_id bigint, context bytea, nonce bytea",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "vault",
    function_name: "_crypto_aead_det_encrypt",
    arguments:
      "message bytea, additional bytea, key_id bigint, context bytea, nonce bytea",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "vault",
    function_name: "_crypto_aead_det_noncegen",
    arguments: "",
    return_type: "bytea",
    language: "c",
  },
  {
    schema: "vault",
    function_name: "create_secret",
    arguments:
      "new_secret text, new_name text, new_description text, new_key_id uuid",
    return_type: "uuid",
    language: "plpgsql",
  },
  {
    schema: "vault",
    function_name: "update_secret",
    arguments:
      "secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid",
    return_type: "void",
    language: "plpgsql",
  },
];
